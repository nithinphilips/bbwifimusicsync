; Script generated by the HM NIS Edit Script Wizard.

; HM NIS Edit Wizard helper defines
; This script needs md5dll.dll plugin
!addplugindir "Plugins"


;!define DEBUG ; Set this to make installer more verbose

!define PRODUCT_NAME "Flashcard Master"

!define PRODUCT_PUBLISHER "Nithin Philips"
!define PRODUCT_EXECUTABLE "FlashCardMaster.exe"
!define PRODUCT_EXECUTABLE_WOEXT "FlashCardMaster"
!define PRODUCT_WEB_SITE "http://flashcardmaster.sourceforge.net/"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${PRODUCT_EXECUTABLE}"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define PRODUCT_STARTMENU_REGVAL "NSIS:StartMenuDir"


!define SHCNE_ASSOCCHANGED 0x08000000
!define SHCNF_FLUSH        0x1000


SetCompressor lzma

; These fields add properties to the generated installer exe.
!ifndef PRODUCT_VERSION 
    !define PRODUCT_VERSION "latest"
    VIProductVersion "0.0.0.0"
!else
    VIProductVersion "${PRODUCT_VERSION}"
!endif

VIAddVersionKey Comments "${PRODUCT_NAME} Installer"
VIAddVersionKey SpecialBuild "No"
VIAddVersionKey PrivateBuild "No"
VIAddVersionKey ProductName "${PRODUCT_NAME}"
VIAddVersionKey ProductVersion "${PRODUCT_VERSION}"
VIAddVersionKey CompanyName "${PRODUCT_PUBLISHER}"
VIAddVersionKey LegalCopyright "© 2010 ${PRODUCT_PUBLISHER}"
VIAddVersionKey FileVersion "${PRODUCT_VERSION}"
VIAddVersionKey LegalTrademarks "All Rights Reserved"
VIAddVersionKey FileDescription "Installer for ${PRODUCT_NAME}"

; MUI 1.67 compatible ------
!include "MUI.nsh"

; Sets the theme path
!define OMUI_THEME_PATH "Themes\Clean-NSIS-H"
; Icons
!define MUI_ICON "${OMUI_THEME_PATH}\installer-nopng.ico"
!define MUI_UNICON "${OMUI_THEME_PATH}\uninstaller-nopng.ico"
; MUI Settings / Header
!define MUI_HEADERIMAGE
!define MUI_HEADERIMAGE_RIGHT
!define MUI_HEADERIMAGE_BITMAP "${OMUI_THEME_PATH}\header-r.bmp"
!define MUI_HEADERIMAGE_UNBITMAP "${OMUI_THEME_PATH}\header-r-un.bmp"
; MUI Settings / Wizard     
!define MUI_WELCOMEFINISHPAGE_BITMAP "${OMUI_THEME_PATH}\wizard.bmp"
!define MUI_UNWELCOMEFINISHPAGE_BITMAP "${OMUI_THEME_PATH}\wizard-un.bmp"

;-----------------------------------------------------------------------
; MUI Settings
;-----------------------------------------------------------------------
!define MUI_ABORTWARNING
!define MUI_COMPONENTSPAGE_SMALLDESC

;--------------------------------
;Language Selection Dialog Settings

;Remember the installer language
!define MUI_LANGDLL_REGISTRY_ROOT ${PRODUCT_UNINST_ROOT_KEY}
!define MUI_LANGDLL_REGISTRY_KEY "${PRODUCT_UNINST_KEY}" 
!define MUI_LANGDLL_REGISTRY_VALUENAME "Installer Language"
  
; Welcome page
;!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE $(myLicenseData)
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Components page
!insertmacro MUI_PAGE_COMPONENTS
; Start menu page
var ICONS_GROUP
!define MUI_STARTMENUPAGE_NODISABLE
!define MUI_STARTMENUPAGE_DEFAULTFOLDER "${PRODUCT_NAME}"
!define MUI_STARTMENUPAGE_REGISTRY_ROOT "${PRODUCT_UNINST_ROOT_KEY}"
!define MUI_STARTMENUPAGE_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "${PRODUCT_STARTMENU_REGVAL}"
!insertmacro MUI_PAGE_STARTMENU Application $ICONS_GROUP
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\${PRODUCT_EXECUTABLE}"
!define MUI_FINISHPAGE_RUN_TEXT "Launch ${PRODUCT_NAME} v${PRODUCT_VERSION}"
;!define MUI_FINISHPAGE_RUN_FUNCTION RunAutoConf
!define MUI_FINISHPAGE_LINK "Visit Home Page"
!define MUI_FINISHPAGE_LINK_LOCATION "${PRODUCT_WEB_SITE}"
!define MUI_FINISHPAGE_NOREBOOTSUPPORT
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_LANGUAGE "Spanish"
!insertmacro MUI_LANGUAGE "Turkish"

!insertmacro MUI_RESERVEFILE_LANGDLL

; Reserve files
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS

LicenseLangString myLicenseData ${LANG_ENGLISH} "gpl.txt"
LicenseLangString myLicenseData ${LANG_SPANISH} "gpl.es.txt"
LicenseLangString myLicenseData ${LANG_TURKISH} "gpl.txt"       ; none available  
LicenseData $(myLicenseData) 
; MUI end ------

Name "${PRODUCT_NAME}"
!ifdef OUT_FILE
	OutFile "${OUT_FILE}"
!else
	OutFile "${PRODUCT_NAME}-${PRODUCT_VERSION}-setup.exe"
!endif
InstallDir "$PROGRAMFILES\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails hide
ShowUnInstDetails hide

Section "!Application" SEC01
  SectionIn RO
  
  SetOutPath "$INSTDIR"
  SetOverwrite ifnewer
  File "..\bin\Release\FlashCardMaster.exe"
  File "..\bin\Release\LibFlashcard.dll"
  File "..\bin\Release\LibNUpdater.dll"
  File "..\bin\Release\MagicLocalLibrary.dll"
  File "..\bin\Release\LumenWorks.Framework.IO.dll"
  File "..\bin\Release\VistaControls.dll"
  
  File "..\Resources\Help.chm"
  File "..\Resources\Icons\Type.Card.ico"
  File "..\Resources\Icons\Type.Cml.ico"
  File "..\Resources\Icons\Type.Csv.ico"
  File "..\Resources\Icons\Type.Folder.ico"
  File "..\Resources\Icons\Type.Html.ico"
  File "..\Resources\Icons\Type.Pro.ico"
  
  
  File "..\README"
  File "..\CHANGES"
  File "..\COPYING"
  
  CreateDirectory "$SMPROGRAMS\$ICONS_GROUP"
  CreateShortCut "$SMPROGRAMS\$ICONS_GROUP\${PRODUCT_NAME}.lnk" "$INSTDIR\${PRODUCT_EXECUTABLE}"
SectionEnd

Section "Samples" SEC02
  SetOutPath "$DOCUMENTS\My Flashcards"
  SetOverwrite off
  File "..\Resources\Samples\*.*"
SectionEnd

SectionGroup Translations

Section "Türkçe" SEC03
  SetOutPath "$INSTDIR\tr"
  SetOverwrite ifnewer
  File "..\bin\Release\tr\*.*"
SectionEnd

Section "Malayalam" SEC04
  SetOutPath "$INSTDIR\ml-IN"
  SetOverwrite ifnewer
  File "..\bin\Release\ml-IN\*.*"
SectionEnd

Section "Español" SEC05
  SetOutPath "$INSTDIR\es"
  SetOverwrite ifnewer
  File "..\bin\Release\es\*.*"
SectionEnd

SectionGroupEnd

;Assign descriptions to sections
  !insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
    !insertmacro MUI_DESCRIPTION_TEXT ${SEC01} "Application files (required)."
    !insertmacro MUI_DESCRIPTION_TEXT ${SEC02} "Sample flashcards. (will be copied to $DOCUMENTS\My FlashCards)"
    !insertmacro MUI_DESCRIPTION_TEXT ${SEC03} "Install Türkçe Translation"
    !insertmacro MUI_DESCRIPTION_TEXT ${SEC04} "Install Malayalam Translation"
    !insertmacro MUI_DESCRIPTION_TEXT ${SEC05} "Install Español Translation"
  !insertmacro MUI_FUNCTION_DESCRIPTION_END


Section Uninstall
  ReadRegStr $ICONS_GROUP ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "${PRODUCT_STARTMENU_REGVAL}"
  
  Delete "$INSTDIR\uninst.exe"
  Delete "$INSTDIR\FlashCardMaster.exe"
  Delete "$INSTDIR\MagicLocalLibrary.dll"
  Delete "$INSTDIR\LumenWorks.Framework.IO.dll"
  Delete "$INSTDIR\VistaControls.dll"
  Delete "$INSTDIR\LibFlashcard.dll"
  Delete "$INSTDIR\LibNUpdater.dll"
  
  Delete "$INSTDIR\Help.chm"
  Delete "$INSTDIR\Type.Card.ico"
  Delete "$INSTDIR\Type.Cml.ico"
  Delete "$INSTDIR\Type.Csv.ico"
  Delete "$INSTDIR\Type.Folder.ico"
  Delete "$INSTDIR\Type.Html.ico"
  Delete "$INSTDIR\Type.Pro.ico"
    
  Delete "$INSTDIR\README"
  Delete "$INSTDIR\CHANGES"
  Delete "$INSTDIR\COPYING"
  
  Delete "$SMPROGRAMS\$ICONS_GROUP\Uninstall.lnk"
  Delete "$SMPROGRAMS\$ICONS_GROUP\Visit Website.lnk"
  Delete "$SMPROGRAMS\$ICONS_GROUP\${PRODUCT_NAME}.lnk"
  
  RMDir /r "$INSTDIR\tr"
  RMDir /r "$INSTDIR\ml-IN"
  RMDir /r "$INSTDIR\es"

  RMDir "$SMPROGRAMS\$ICONS_GROUP"
  
  RMDir "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  
  DeleteRegKey HKEY_CLASSES_ROOT ".card"
  DeleteRegKey HKEY_CLASSES_ROOT "CardDeck"

  DeleteRegKey HKEY_CLASSES_ROOT ".cml"
  DeleteRegKey HKEY_CLASSES_ROOT "XMLCardDeck"

  ; Using the system.dll plugin to call the SHChangeNotify Win32 API function so we
  ; can update the shell.
  System::Call "shell32::SHChangeNotify(i,i,i,i) (${SHCNE_ASSOCCHANGED}, ${SHCNF_FLUSH}, 0, 0)

  SetAutoClose true
SectionEnd

Section -AdditionalIcons
  CreateShortCut "$SMPROGRAMS\$ICONS_GROUP\Visit Website.lnk" "${PRODUCT_WEB_SITE}"
  CreateShortCut "$SMPROGRAMS\$ICONS_GROUP\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\${PRODUCT_EXECUTABLE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\${PRODUCT_EXECUTABLE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "${PRODUCT_STARTMENU_REGVAL}" "$ICONS_GROUP"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"

  WriteRegStr HKEY_CLASSES_ROOT ".card" "" "CardDeck"
  WriteRegStr HKEY_CLASSES_ROOT ".card" "Content Type" "application/flashcardmaster"
  WriteRegStr HKEY_CLASSES_ROOT "CardDeck" "" "Flashcard Deck"
  WriteRegStr HKEY_CLASSES_ROOT "CardDeck\DefaultIcon" "" "$INSTDIR\Type.Card.ico"
  WriteRegStr HKEY_CLASSES_ROOT "CardDeck\Shell" "" ""
  WriteRegStr HKEY_CLASSES_ROOT "CardDeck\Shell\Open" "" ""
  WriteRegStr HKEY_CLASSES_ROOT "CardDeck\Shell\Open\Command" "" '"$INSTDIR\${PRODUCT_EXECUTABLE}" "%1"'

  WriteRegStr HKEY_CLASSES_ROOT ".cml" "" "XMLCardDeck"
  WriteRegStr HKEY_CLASSES_ROOT ".cml" "Content Type" "text/xml"
  WriteRegStr HKEY_CLASSES_ROOT "XMLCardDeck" "" "Flashcard Deck"
  WriteRegStr HKEY_CLASSES_ROOT "XMLCardDeck\DefaultIcon" "" "$INSTDIR\Type.Cml.ico"
  WriteRegStr HKEY_CLASSES_ROOT "XMLCardDeck\Shell" "" ""
  WriteRegStr HKEY_CLASSES_ROOT "XMLCardDeck\Shell\Open" "" ""
  WriteRegStr HKEY_CLASSES_ROOT "XMLCardDeck\Shell\Open\Command" "" '"$INSTDIR\${PRODUCT_EXECUTABLE}" "%1"'

  ; Using the system.dll plugin to call the SHChangeNotify Win32 API function so we
  ; can update the shell.
  System::Call "shell32::SHChangeNotify(i,i,i,i) (${SHCNE_ASSOCCHANGED}, ${SHCNF_FLUSH}, 0, 0)"
  
SectionEnd

!define DOT_MAJOR 2
!define DOT_MINOR 0

Function .onInit
  BringToFront
  ; Check if installer is already running
  ; If so don't open another but bring to front
  System::Call "kernel32::CreateMutexA(i 0, i 0, t '$(^Name)') i .r0 ?e"
  Pop $0
   StrCmp $0 0 runInstaller
   StrLen $0 "$(^Name)"
   IntOp $0 $0 + 1
  loop:
    FindWindow $1 '#32770' '' 0 $1
    IntCmp $1 0 +4
    System::Call "user32::GetWindowText(i r1, t .r2, i r0) i."
    StrCmp $2 "$(^Name)" 0 loop
    System::Call "user32::ShowWindow(i r1,i 9) i."         ; If minimized then maximize
    System::Call "user32::SetForegroundWindow(i r1) i."    ; Bring to front
    Abort
  runInstaller:
    Call IsDotNETInstalled
    Call CheckForExeInstance
    Call UninstallPrev
    !insertmacro MUI_LANGDLL_DISPLAY
FunctionEnd

Function UninstallPrev
 
  ReadRegStr $R0 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" 
  StrCmp $R0 "" done
 
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION "Another version of ${PRODUCT_NAME} is already installed. $\n$\nClick 'OK' to remove the previous version or 'Cancel' to cancel this upgrade."  /SD IDOK IDOK uninst
  Abort
  
;Run the uninstaller
uninst:
  ClearErrors
  ExecWait '$R0 /S _?=$INSTDIR' ;Do not copy the uninstaller to a temp file
 
  IfErrors abortL
    ;You can either use Delete /REBOOTOK in the uninstaller or add some code
    ;here to remove the uninstaller. Use a registry key to check
    ;whether the user has chosen to uninstall. If you are using an uninstaller
    ;components page, make sure all sections are uninstalled.
    ReadRegStr $R1 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" 
    StrCmp $R1 "" +1 abortL
    Delete $R0
done:
   Return
abortL:
   Abort
   
FunctionEnd

; Usage
; Define in your script two constants:
;   DOT_MAJOR "(Major framework version)"
;   DOT_MINOR "{Minor frameword version)"
; 
; Call IsDotNetInstalled
; This function will abort the installation if the required version 
; or higher version of the .NETFramework is not installed.  Place it in
; either your .onInit function or your first install section before 
; other code.
Function IsDotNetInstalled

  StrCpy $0 "0"
  StrCpy $1 "SOFTWARE\Microsoft\.NETFramework" ;registry entry to look in.
  StrCpy $2 0

  StartEnum:
    ;Enumerate the versions installed.
    EnumRegKey $3 HKLM "$1\policy" $2
    
    ;If we don't find any versions installed, it's not here.
    StrCmp $3 "" noDotNet notEmpty
    
    ;We found something.
    notEmpty:
      ;Find out if the RegKey starts with 'v'.  
      ;If it doesn't, goto the next key.
      StrCpy $4 $3 1 0
      StrCmp $4 "v" +1 goNext
      StrCpy $4 $3 1 1
      
      ;It starts with 'v'.  Now check to see how the installed major version
      ;relates to our required major version.
      ;If it's equal check the minor version, if it's greater, 
      ;we found a good RegKey.
      IntCmp $4 ${DOT_MAJOR} +1 goNext yesDotNetReg
      ;Check the minor version.  If it's equal or greater to our requested 
      ;version then we're good.
      StrCpy $4 $3 1 3
      IntCmp $4 ${DOT_MINOR} yesDotNetReg goNext yesDotNetReg

    goNext:
      ;Go to the next RegKey.
      IntOp $2 $2 + 1
      goto StartEnum

  yesDotNetReg:
    ;Now that we've found a good RegKey, let's make sure it's actually
    ;installed by getting the install path and checking to see if the 
    ;mscorlib.dll exists.
    EnumRegValue $2 HKLM "$1\policy\$3" 0
    ;$2 should equal whatever comes after the major and minor versions 
    ;(ie, v1.1.4322)
    StrCmp $2 "" noDotNet
    ReadRegStr $4 HKLM $1 "InstallRoot"
    ;Hopefully the install root isn't empty.
    StrCmp $4 "" noDotNet
    ;build the actuall directory path to mscorlib.dll.
    StrCpy $4 "$4$3.$2\mscorlib.dll"
    IfFileExists $4 yesDotNet noDotNet

  noDotNet:
    ;Nope, something went wrong along the way.  Looks like the 
    ;proper .NETFramework isn't installed.  
    MessageBox MB_OK "You must have v${DOT_MAJOR}.${DOT_MINOR} or greater of the .NETFramework installed. The installer cannot continue." /SD IDOK
    Abort

  yesDotNet:
    ;Everything checks out.  Go on with the rest of the installation.
    
FunctionEnd

!macro CheckForExeInstance undot un
Function ${undot}CheckForExeInstance
  checkExeInstance:
    ; Check if PRODUCT_EXECUTABLE (i.e. It.exe) is running
    FindProcDLL::FindProc "${PRODUCT_EXECUTABLE}"
    StrCmp 1 $R0 warnWait allOK
  warnWait:
    MessageBox MB_ICONEXCLAMATION|MB_RETRYCANCEL|MB_DEFBUTTON1 "${PRODUCT_EXECUTABLE} must to be closed before the ${un}installer can continue. Please close ${PRODUCT_NAME}." IDRETRY checkExeInstance IDCANCEL abortInstall
  abortInstall:
    Abort
  allOK:
FunctionEnd
!macroend

!insertmacro CheckForExeInstance "" ""
!insertmacro CheckForExeInstance "un." "un"

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) v${PRODUCT_VERSION} was successfully removed from your computer." /SD IDOK
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) v${PRODUCT_VERSION} and all of its components?" /SD IDYES IDYES resumeUninit
  Abort
  resumeUninit:
    Call un.CheckForExeInstance
FunctionEnd

; Given a .NET version number, this function returns that .NET framework's
; install directory. Returns "" if the given .NET version is not installed.
; Params: [version] (eg. "v2.0")
; Return: [dir] (eg. "C:\WINNT\Microsoft.NET\Framework\v2.0.50727")
Function GetDotNetDir
  ClearErrors
	Exch $R0 ; Set R0 to .net version major
	Push $R1
	Push $R2
 
	; set R1 to minor version number of the installed .NET runtime
	EnumRegValue $R1 HKLM \
		"Software\Microsoft\.NetFramework\policy\$R0" 0
	IfErrors getdotnetdir_err
 
	; set R2 to .NET install dir root
	ReadRegStr $R2 HKLM \
		"Software\Microsoft\.NetFramework" "InstallRoot"
	IfErrors getdotnetdir_err
 
	; set R0 to the .NET install dir full
	StrCpy $R0 "$R2$R0.$R1"
 
getdotnetdir_end:
	Pop $R2
	Pop $R1
	Exch $R0 ; return .net install dir full
	Return
 
getdotnetdir_err:
	StrCpy $R0 ""
	Goto getdotnetdir_end
 
FunctionEnd

; Given a .NET version number, this function returns that .NET framework's
; install directory. Returns "" if the given .NET version is not installed.
; Params: [version] (eg. "v2.0")
; Return: [dir] (eg. "C:\WINNT\Microsoft.NET\Framework\v2.0.50727")
Function un.GetDotNetDir
  ClearErrors
	Exch $R0 ; Set R0 to .net version major
	Push $R1
	Push $R2
 
	; set R1 to minor version number of the installed .NET runtime
	EnumRegValue $R1 HKLM \
		"Software\Microsoft\.NetFramework\policy\$R0" 0
	IfErrors getdotnetdir_err
 
	; set R2 to .NET install dir root
	ReadRegStr $R2 HKLM \
		"Software\Microsoft\.NetFramework" "InstallRoot"
	IfErrors getdotnetdir_err
 
	; set R0 to the .NET install dir full
	StrCpy $R0 "$R2$R0.$R1"
 
getdotnetdir_end:
	Pop $R2
	Pop $R1
	Exch $R0 ; return .net install dir full
	Return
 
getdotnetdir_err:
	StrCpy $R0 ""
	Goto getdotnetdir_end
 
FunctionEnd
